checkOutCheck = async () =>{// different from similar func in basketpage
      console.log('checking out')
      let items = this.basket
      let fail = false

      if (this.total < 0){//MINIMUM ORDER CHECK
        alert("You need to spend a minimum of N2000 for our delivery service")
        fail = true
        const { navigation } = this.props;
          navigation.navigate(
            'Basket',
          )
        return fail
      }
  
      if (items.length < 1){
        alert("There are no items in your basket")
        fail = true
        const { navigation } = this.props;
          navigation.navigate(
            'Basket',
          )
        return fail
      }
  
      try{
        let store = getSelectStore(this.state.store)
        this.setState({store: store}) 
        if (this.state.store.open === "no"){
          alert('shop closed! opens at 8am')
          fail = true
          return fail
        }
        this.asyncForEach(items, async (basketItem) => { 
          let dbItem = getSelectProduct(basketItem.info, this.onRetrieved)   
          if (parseInt(dbItem.price) == parseInt(basketItem.info.price)){
            console.log('price equal')
          }
          else{
            console.log('price not equal')
            fail = true
            alert(basketItem.name + "'s price has changed since you added it to your basket.\nPlease review the updated price and checkout agian")
          }
          if (!dbItem.shop){
            if (parseInt(dbItem.stock) >= parseInt(basketItem.qty)){
              console.log('product still in stock')
            }
            else{
              console.log('product not in stock')
              fail = true
              alert("Not enough " + basketItem.name + ' in stock.\nPlease revise your basket and checkout again')
            }
          }
        
        if (fail === true){
          const { navigation } = this.props;
          navigation.navigate(
            'Basket',
          )
          console.log('fail on checkoutcheck i.e 1 '+ fail)
          return fail
        }
        })
        setTimeout(()=> {console.log("waiting")}, 1000)
        } catch (error) {
          console.warn(error)
          alert('Error: please try again or restart')
        }
        //setTimeout(()=> {console.log("waiting")}, 1000)
        return fail
    }

    onClickSubmit = async () => {
      this.storeLocalData("checkoutName",  this.state.name)
      this.storeLocalData("checkoutAddr", this.state.address)
      this.storeLocalData("checkoutHouse", this.state.house)
      this.storeLocalData("checkoutPhone", this.state.phoneNumber)
      //alert("your order is being submitted \n please wait...")
      const { navigation } = this.props;

      let items = this.basket
      let msg = "Order Items:%0A"
      let i = 1
      this.asyncForEach(items, async (basketItem) => { 
        console.warn(basketItem)
        if (basketItem.info.price){
          addSale(basketItem)
        }
        msg += "%20" + i + ")" + basketItem.name + " x " + basketItem.qty + "%0A"
        i += 1
        })
      msg += "%0AName: " + this.state.name + "%0A"
      msg += "Address: " + this.state.house + "%20" + this.state.address + "%0A"
      msg += "Type: " + this.state.type + "%0A"
      msg += "Total: N" + this.state.total + "%0A"

  
      try{
         this.checkOutCheck().then( async (fail)=>{
          console.log('fail on submit i.e 2 '+ fail)
          if (fail === false){

            //setTimeout(async ()=> {this.sendAlert(this.state)}, 1000) //comment only in test
             addOrder(this.state, this.onOrderUploaded)
            this.clearAllLocalData()
            let prods =  this.basket
            this.asyncForEach(prods,async (prod)=>{//change to asyncforech
              let dbItem = getSelectProduct(prod.info)
              prod.info.amt = prod.qty//TBC for cloud security rules i.e allow update if data.new == data.old - prod.info.amt
              prod.info.stock = Math.max(dbItem.stock - prod.qty,0)
              updateProduct(prod.info, this.onProductUploaded)
            })
          }
          else if (fail === true){
            console.log('checkout failed')
            alert('please revise your basket')
          }
        })
      } catch (error) {
        console.warn(error)
        alert('Error: please try again or restart')
      }
      this.storeHistory()

      

       navigation.navigate(
        'More Apps',
        {order: this.state}
      )

      navigation.navigate(
        'Order Complete',
        {order: this.state}
      )

      let link = `http://api.whatsapp.com/send?text=${msg}&phone=+2348097908824`
      Linking.openURL(link)

    }

 